# Code in R (v4.3.1) for the paper: "Psychometric validation of the Hospital Stress Questionnaire"

# Load packages and survey response data
install.packages("tidyverse")
library(tidyverse)
install.packages("psych")
library(psych)
install.packages("readr")
library(readr)
vdata <- read_csv("vdata.csv")
View(vdata)

# Set N/A values (i.e. values of 11) in HSQ equal to 1
vdata <- vdata %>% mutate_at(vars(starts_with("HSQ_")), ~ ifelse(. == 11, 1, .))

# Calculate a total HSQ score for each participant
vdata <- vdata %>% mutate(HSQ_total = rowSums(across(HSQ_1:HSQ_67)))

# Reverse code items 4, 5, 7, and 8 of PSS-10
reverse_columns <- c("PSS_4", "PSS_5", "PSS_7", "PSS_8")
vdata[, reverse_columns] <- 4 - vdata[, reverse_columns]

# Calculate a total PSS-10 score for each participant
vdata <- vdata %>% mutate(PSS_total = rowSums(across(PSS_1:PSS_10)))

# Calculate a total EQ-5D score for each participant
vdata <- vdata %>% mutate(EQ5D_total = rowSums(across(EQ5D_1:EQ5D_5)))

# Descriptive statistics
vdata %>% summarise(Mean = mean(HSQ_total),
                   SD = sd(HSQ_total),
                   Median = median(HSQ_total),
                   Minimum = min(HSQ_total),
                   Maximum = max(HSQ_total))
vdata %>% summarise(Mean = mean(age_c),
                   SD = sd(age_c),
                   Median = median(age_c),
                   Minimum = min(age_c),
                   Maximum = max(age_c))
vdata %>% summarise(Mean = mean(stays_life, na.rm = T),
                   SD = sd(stays_life, na.rm = T),
                   Median = median(stays_life, na.rm = T),
                   Minimum = min(stays_life, na.rm = T),
                   Maximum = max(stays_life, na.rm = T))
vdata %>% summarise(Mean = mean(stays_year, na.rm = T),
                   SD = sd(stays_year, na.rm = T),
                   Median = median(stays_year, na.rm = T),
                   Minimum = min(stays_year, na.rm = T),
                   Maximum = max(stays_year, na.rm = T))
vdata %>% summarise(Mean = mean(LOS, na.rm = T),
                   SD = sd(LOS, na.rm = T),
                   Median = median(LOS, na.rm = T),
                   Minimum = min(LOS, na.rm = T),
                   Maximum = max(LOS, na.rm = T))
vdata %>% count(sex)
vdata %>% count(gender)
vdata %>% count(ethnicity)
vdata %>% count(education)
vdata %>% count(marital)
vdata %>% count(surgery)
vdata %>% count(planned)

# Create seperate dataset for just HSQ items
var_names <- paste0("HSQ_", 1:67)
HSQ_items <- select(vdata, all_of(var_names))
View(HSQ_items)

# Means and SDs of each HSQ item
means <- colMeans(HSQ_items)
sds <- apply(HSQ_items, 2, sd)
HSQ_MSD <- data.frame(Variable = names(means), Mean = round(means, 2), SD = round(sds, 2))
View(HSQ_MSD)

# Display response frequencies as percentages
mrange <- as.data.frame(round((HSQ_alpha$response.freq * 100), 1))
View(mrange)

# Calculate inter-item correlations
rmatrix <- cor(HSQ_items, use = "complete.obs")
rmatrix <- as.data.frame(as.table(round(rmatrix, 2)))  ### table easier to read than 67x67 matrix
View(rmatrix)

# Identify any potentially redundant items (i.e. r >= 0.7)
iic <- rmatrix %>% filter(Var1 != Var2)
iic_high <- iic %>% filter(Freq >= .7)
View(iic_high)

# Calculate average inter-item correlations for each item
results_list <- list()
for (variable in var_names) {
  iic_variable <- iic %>% filter(Var2 == variable)
  results <- iic_variable %>% 
    summarise(
      Mean = round(mean(Freq), 2),
      SD = round(sd(Freq), 2),
      Median = median(Freq),
      Minimum = min(Freq),
      Maximum = max(Freq)
    )  
  results_list[[variable]] <- results
}
avg_iic <- bind_rows(results_list, .id = "Variable")
View(avg_iic)

# Identify items not correlating well with other items (i.e. < 0.3)
iic_low <- avg_iic %>% filter(Mean <= .3 & Median <= .3)
View(iic_low)


### Exploratory Factor Analysis ###
install.packages("REdaS")
library(REdaS)

# Bartlett's and KMO
bart_spher(HSQ_items)
KMOS(HSQ_items)

# Parallel Analysis, Scree plot, and Eigenvalues
nfactors <- psych::fa.parallel(HSQ_items, fm = "ml", fa = "fa")
nfactors$fa.values

# Minimum Average Partial (MAP) test
VSS(HSQ_items, rotate = "oblimin", fm = "mle")

# EFA for models with 4, 6, 7, and 8 factors
HSQ_f4 <- psych::fa(HSQ_items, nfactors = 4, rotate = "oblimin", fm = "ml")
1 - ((HSQ_f4$STATISTIC - HSQ_f4$dof)/(HSQ_f4$null.chisq - HSQ_f4$null.dof))  # Calculate CFI
print(HSQ_f4)
HSQ_f6 <- psych::fa(HSQ_items, nfactors = 6, rotate = "oblimin", fm = "ml")
1 - ((HSQ_f6$STATISTIC - HSQ_f6$dof)/(HSQ_f6$null.chisq - HSQ_f6$null.dof))  # Calculate CFI
print(HSQ_f6)
HSQ_f7 <- psych::fa(HSQ_items, nfactors = 7, rotate = "oblimin", fm = "ml")
1 - ((HSQ_f7$STATISTIC - HSQ_f7$dof)/(HSQ_f7$null.chisq - HSQ_f7$null.dof))  # Calculate CFI
print(HSQ_f7)
HSQ_f8 <- psych::fa(HSQ_items, nfactors = 8, rotate = "oblimin", fm = "ml")
1 - ((HSQ_f8$STATISTIC - HSQ_f8$dof)/(HSQ_f8$null.chisq - HSQ_f8$null.dof))  # Calculate CFI
print(HSQ_f8)

# Exclude items that don't load >= 0.3 onto 7-factor model
HSQ_i60 <- HSQ_items[, -c(22, 23, 26, 30, 50, 55, 65)]
HSQ_f7b <- psych::fa(HSQ_i60, nfactors = 7, rotate = "oblimin", fm = "ml")
print(HSQ_f7b)

# Exclude items that don't load >= 0.3 onto second 7-factor model
HSQ_i59 <- HSQ_items[, -c(22, 23, 26, 30, 35, 50, 55, 65)]
HSQ_f7c <- psych::fa(HSQ_i59, nfactors = 7, rotate = "oblimin", fm = "ml")
print(HSQ_f7c)

Exclude redundant items (correlated >= 0.7 with several other items)
HSQ_i56 <- HSQ_items[, -c(5, 20, 22, 23, 26, 29, 30, 35, 50, 55, 65)]
HSQ_f7d <- psych::fa(HSQ_i56, nfactors = 7, rotate = "oblimin", fm = "ml")
print(HSQ_f7d)

# Exclude items that don't load >= 0.3 onto final model
HSQ_i55 <- HSQ_items[, -c(5, 20, 22, 23, 26, 29, 30, 35, 49, 50, 55, 65)]
HSQ_f7e <- psych::fa(HSQ_i55, nfactors = 7, rotate = "oblimin", fm = "ml")
print(HSQ_f7e)

1 - ((HSQ_f7e$STATISTIC - HSQ_f7e$dof)/(HSQ_f7e$null.chisq - HSQ_f7e$null.dof))  # Calculate CFI of final model

# Create factors
factor1 <- HSQ_items[, c(6, 7, 8, 9, 10, 13, 16, 21, 25, 27, 52)]
factor2 <- HSQ_items[, c(12, 18, 19, 32, 41, 43, 54, 58)]
factor3 <- HSQ_items[, c(31, 44, 47, 48, 53, 59, 60, 61, 62, 66, 67)]
factor4 <- HSQ_items[, c(2, 11, 14, 15, 39, 56, 57)]
factor5 <- HSQ_items[, c(3, 24, 46, 63, 64)]
factor6 <- HSQ_items[, c(1, 4, 17, 28, 34, 40, 45, 51)]
factor7 <- HSQ_items[, c(33, 36, 37, 38, 42)]

# Calculate internal consistency for 55-item scale and each factor
psych::alpha(HSQ_i55)
psych::alpha(factor1)
psych::alpha(factor2)
psych::alpha(factor3)
psych::alpha(factor4)
psych::alpha(factor5)
psych::alpha(factor6)
psych::alpha(factor7)

# Calculate total score for 55-item version of scale
HSQ_i55t <- HSQ_i55 %>% mutate(HSQ_total = rowSums(across(HSQ_1:HSQ_67)))

# Calculate convergent validity
cor.test(HSQ_i55t$HSQ_total, vdata$PSS_total)

# Calculate divergent validity
cor.test(HSQ_i55t$HSQ_total, vdata$EQ5D_total)

# Calculate test-retest for 55-item scale
retest <- read_csv("retest.csv")
retest55 <- retest %>% select(-c(HSQ_5, HSQ_20, HSQ_22, HSQ_23, HSQ_26, HSQ_29, HSQ_30, HSQ_35, HSQ_49, HSQ_50, HSQ_55, HSQ_65))
retest55 <- retest55 %>% mutate(HSQ_total = rowSums(across(HSQ_1:HSQ_67)))
retest1 <- retest55$HSQ_total[retest55$Session == 1]
retest2 <- retest55$HSQ_total[retest55$Session == 2]
cor.test(retest1, retest2)

# Calculate test-retest for factor 1
retest_f1 <- retest %>% select(Session, HSQ_6, HSQ_7, HSQ_8, HSQ_9, HSQ_10, HSQ_13, HSQ_16, HSQ_21, HSQ_25, HSQ_27, HSQ_52)
retest_f1 <- retest_f1 %>% mutate(HSQ_total = rowSums(across(HSQ_6:HSQ_52)))
retest_f1a <- retest_f1$HSQ_total[retest_f1$Session == 1]
retest_f1b <- retest_f1$HSQ_total[retest_f1$Session == 2]
cor.test(retest_f1a, retest_f1b)

# Calculate test-retest for factor 2
retest_f2 <- retest %>% select(Session, HSQ_12, HSQ_18, HSQ_19, HSQ_32, HSQ_41, HSQ_43, HSQ_54, HSQ_58)
retest_f2 <- retest_f2 %>% mutate(HSQ_total = rowSums(across(HSQ_12:HSQ_58)))
retest_f2a <- retest_f2$HSQ_total[retest_f2$Session == 1]
retest_f2b <- retest_f2$HSQ_total[retest_f2$Session == 2]
cor.test(retest_f2a, retest_f2b)

# Calculate test-retest for factor 3
retest_f3 <- retest %>% select(Session, HSQ_31, HSQ_44, HSQ_47, HSQ_48, HSQ_53, HSQ_59, HSQ_60, HSQ_61, HSQ_62, HSQ_66, HSQ_67)
retest_f3 <- retest_f3 %>% mutate(HSQ_total = rowSums(across(HSQ_31:HSQ_67)))
retest_f3a <- retest_f3$HSQ_total[retest_f3$Session == 1]
retest_f3b <- retest_f3$HSQ_total[retest_f3$Session == 2]
cor.test(retest_f3a, retest_f3b)

# Calculate test-retest for factor 4
retest_f4 <- retest %>% select(Session, HSQ_2, HSQ_11, HSQ_14, HSQ_15, HSQ_39, HSQ_56, HSQ_57)
retest_f4 <- retest_f4 %>% mutate(HSQ_total = rowSums(across(HSQ_2:HSQ_57)))
retest_f4a <- retest_f4$HSQ_total[retest_f4$Session == 1]
retest_f4b <- retest_f4$HSQ_total[retest_f4$Session == 2]
cor.test(retest_f4a, retest_f4b)

# Calculate test-retest for factor 5
retest_f5 <- retest %>% select(Session, HSQ_3, HSQ_24, HSQ_46, HSQ_63, HSQ_64)
retest_f5 <- retest_f5 %>% mutate(HSQ_total = rowSums(across(HSQ_3:HSQ_64)))
retest_f5a <- retest_f5$HSQ_total[retest_f5$Session == 1]
retest_f5b <- retest_f5$HSQ_total[retest_f5$Session == 2]
cor.test(retest_f5a, retest_f5b)

# Calculate test-retest for factor 6
retest_f6 <- retest %>% select(Session, HSQ_1, HSQ_4, HSQ_17, HSQ_28, HSQ_34, HSQ_40, HSQ_45, HSQ_51)
retest_f6 <- retest_f6 %>% mutate(HSQ_total = rowSums(across(HSQ_1:HSQ_51)))
retest_f6a <- retest_f6$HSQ_total[retest_f6$Session == 1]
retest_f6b <- retest_f6$HSQ_total[retest_f6$Session == 2]
cor.test(retest_f6a, retest_f6b)

# Calculate test-retest for factor 7
retest_f7 <- retest %>% select(Session, HSQ_33, HSQ_36, HSQ_37, HSQ_38, HSQ_42)
retest_f7 <- retest_f7 %>% mutate(HSQ_total = rowSums(across(HSQ_33:HSQ_42)))
retest_f7a <- retest_f7$HSQ_total[retest_f7$Session == 1]
retest_f7b <- retest_f7$HSQ_total[retest_f7$Session == 2]
cor.test(retest_f7a, retest_f7b)

# Medium-length version (28-items)
HSQ28 <- HSQ_items[, c(16, 7, 52, 21, 32, 19, 18, 43, 61, 66, 59, 60, 15, 56, 11, 39, 63, 3, 46, 24, 4, 28, 34, 17, 36, 38, 37, 42)]
f28_1 <- HSQ_items[, c(16, 7, 52, 21)]  #factor1
psych::alpha(f28_1)
f28_2 <- HSQ_items[, c(32, 19, 18, 43)]  #factor2
psych::alpha(f28_2)
f28_3 <- HSQ_items[, c(61, 66, 59, 60)]  #factor3
psych::alpha(f28_3)
f28_4 <- HSQ_items[, c(15, 56, 11, 39)]  #factor4
psych::alpha(f28_4)
f28_5 <- HSQ_items[, c(63, 3, 46, 24)]  #factor5
psych::alpha(f28_5)
f28_6 <- HSQ_items[, c(4, 28, 34, 17)]  #factor6
psych::alpha(f28_6)
f28_7 <- HSQ_items[, c(36, 38, 37, 42)]  #factor7
psych::alpha(f28_7)

# Construct validity, medium-length
HSQ28$HSQ_total <- rowSums(HSQ28)
cor.test(HSQ28$HSQ_total, vdata$PSS_total)  # convergent
cor.test(HSQ28$HSQ_total, vdata$EQ5D_total)  # divergent

# Test-retest, medium-length
retest28 <- retest %>% select(Session,
                              HSQ_16, HSQ_7, HSQ_52, HSQ_21,
                              HSQ_32, HSQ_19, HSQ_18, HSQ_43,
                              HSQ_61, HSQ_66, HSQ_59, HSQ_60,
                              HSQ_15, HSQ_56, HSQ_11, HSQ_39,
                              HSQ_63, HSQ_3, HSQ_46, HSQ_24,
                              HSQ_4, HSQ_28, HSQ_34, HSQ_17,
                              HSQ_36, HSQ_38, HSQ_37, HSQ_42)
retest28 <- retest28 %>% mutate(HSQ_total = rowSums(across(HSQ_16:HSQ_42)))
retest28_1 <- retest28$HSQ_total[retest28$Session == 1]
retest28_2 <- retest28$HSQ_total[retest28$Session == 2]
cor.test(retest28_1, retest28_2)
